{"version":3,"file":"static/js/616.54a812e7.chunk.js","mappings":"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","sources":["css/CountryCardDetailsStyles.js","components/NoMatch.tsx","css/BorderCountriesStyle.js","data/countryMap.ts","components/BorderCountries.tsx","components/CountryCardDetails.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  /* margin-top: 70px;\r\n  margin-left: 50px; */\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-content: center;\r\n  align-items: center;\r\n  /* grid-template: 150px 300px / 1fr; */\r\n  background-color: ${({ theme }) => theme.body};\r\n  font-size: 16px;\r\n\r\n  @media (min-width: 900px) {\r\n    /* align-items: flex-start; */\r\n    max-width: 900px;\r\n  }\r\n\r\n  @media (min-width: 1400px) {\r\n    max-width: 100%;\r\n    display: grid;\r\n    /* justify-content: center; */\r\n    /* align-content: center; */\r\n    align-items: start;\r\n    grid-template: 200px 300px / 35% 50%;\r\n    margin-top: 50px;\r\n    /* margin-left: 50px; */\r\n    margin-left: 1%;\r\n    margin-right: 1%;\r\n  }\r\n`;\r\n\r\nexport const BackButton = styled.button`\r\n  margin-top: 25px;\r\n  margin-bottom: 25px;\r\n  margin-left: 5%;\r\n  width: 100px;\r\n  height: 45px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  align-self: flex-start;\r\n\r\n  background-color: ${({ theme }) => theme.background};\r\n  filter: drop-shadow(2px 2px 2px ${({ theme }) => theme.shadow});\r\n  border-radius: 6px;\r\n  color: ${({ theme }) => theme.text};\r\n  cursor: pointer;\r\n  border: none;\r\n\r\n  @media (min-width: 600px) {\r\n    margin-top: 100px;\r\n    margin-left: 50px;\r\n  }\r\n\r\n  @media (min-width: 1400px) {\r\n    /* margin-bottom: 0; */\r\n    grid-area: 1 / 1 / 2 / 3;\r\n    align-self: start;\r\n    justify-self: start;\r\n    margin-left: 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.div`\r\n  height: auto;\r\n  width: 90%;\r\n  max-width: 500px;\r\n  aspect-ratio: calc(5 / 3);\r\n  display: block;\r\n  -moz-box-sizing: border-box;\r\n  box-sizing: border-box;\r\n  filter: drop-shadow(2px 2px 2px ${({ theme }) => theme.shadow});\r\n\r\n  @media (min-width: 600px) {\r\n    align-self: flex-start;\r\n    margin-left: 50px;\r\n  }\r\n\r\n  @media (min-width: 1400px) {\r\n    height: 300px;\r\n    width: 500px;\r\n    margin-left: 0;\r\n  }\r\n`;\r\n\r\nexport const InfoContainer = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 200px;\r\n  width: 90%;\r\n\r\n  @media (min-width: 900px) {\r\n    display: grid;\r\n    grid-template: 100px 200px 50px/ 40% 60%;\r\n    /* margin-left: 50px; */\r\n    /* height: 300px; */\r\n    /* width: 700px; */\r\n  }\r\n\r\n  @media (min-width: 1400px) {\r\n    display: grid;\r\n    grid-template: 50px 150px 50px/ 40% 60%;\r\n    margin-left: 50px;\r\n    /* height: 300px; */\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const Header = styled.h1`\r\n  grid-area: 1 / 1 / 2 / 3;\r\n  align-self: start;\r\n  padding: 10px;\r\n  margin-bottom: 20px;\r\n\r\n  @media (min-width: 1400px) {\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n  }\r\n`;\r\n\r\nexport const InfoPane = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  align-items: flex-start;\r\n  height: 100%;\r\n`;\r\n\r\nexport const BorderSpan = styled.div`\r\n  width: 200px;\r\n  font-weight: bold;\r\n  padding-top: 10px;\r\n`;\r\n\r\nexport const Footer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  padding: 10px;\r\n  width: 100%;\r\n\r\n  /* @media (min-width: 900px) {\r\n  } */\r\n\r\n  @media (min-width: 900px) {\r\n    grid-area: 3 / 1 / 4 / 3;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nexport function NoMatch() {\r\n  return (\r\n    <div>\r\n      <h2>No matching country could be found!</h2>\r\n      <p>\r\n        <Link to=\"/\">Go to the home page</Link>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const BorderCountry = styled.button`\r\n  background-color: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 2px 7px;\r\n  text-align: center;\r\n  touch-action: none;\r\n  border-radius: 6px;\r\n  height: 30px;\r\n  padding: 5px 10px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  filter: drop-shadow(2px 2px 2px ${({ theme }) => theme.shadow});\r\n  border: none;\r\n`;\r\n\r\nexport const BorderCountryContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  align-content: center;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n  height: auto;\r\n`;\r\n","export const countryMap: any = {\r\n  AFG: \"Afghanistan\",\r\n  ALA: \"Åland Islands\",\r\n  ALB: \"Albania\",\r\n  DZA: \"Algeria\",\r\n  ASM: \"American Samoa\",\r\n  AND: \"Andorra\",\r\n  AGO: \"Angola\",\r\n  AIA: \"Anguilla\",\r\n  ATA: \"Antarctica\",\r\n  ATG: \"Antigua and Barbuda\",\r\n  ARG: \"Argentina\",\r\n  ARM: \"Armenia\",\r\n  ABW: \"Aruba\",\r\n  AUS: \"Australia\",\r\n  AUT: \"Austria\",\r\n  AZE: \"Azerbaijan\",\r\n  BHS: \"Bahamas\",\r\n  BHR: \"Bahrain\",\r\n  BGD: \"Bangladesh\",\r\n  BRB: \"Barbados\",\r\n  BLR: \"Belarus\",\r\n  BEL: \"Belgium\",\r\n  BLZ: \"Belize\",\r\n  BEN: \"Benin\",\r\n  BMU: \"Bermuda\",\r\n  BTN: \"Bhutan\",\r\n  BOL: \"Bolivia (Plurinational State of)\",\r\n  BES: \"Bonaire, Sint Eustatius and Saba\",\r\n  BIH: \"Bosnia and Herzegovina\",\r\n  BWA: \"Botswana\",\r\n  BVT: \"Bouvet Island\",\r\n  BRA: \"Brazil\",\r\n  IOT: \"British Indian Ocean Territory\",\r\n  UMI: \"United States Minor Outlying Islands\",\r\n  VGB: \"Virgin Islands (British)\",\r\n  VIR: \"Virgin Islands (U.S.)\",\r\n  BRN: \"Brunei Darussalam\",\r\n  BGR: \"Bulgaria\",\r\n  BFA: \"Burkina Faso\",\r\n  BDI: \"Burundi\",\r\n  KHM: \"Cambodia\",\r\n  CMR: \"Cameroon\",\r\n  CAN: \"Canada\",\r\n  CPV: \"Cabo Verde\",\r\n  CYM: \"Cayman Islands\",\r\n  CAF: \"Central African Republic\",\r\n  TCD: \"Chad\",\r\n  CHL: \"Chile\",\r\n  CHN: \"China\",\r\n  CXR: \"Christmas Island\",\r\n  CCK: \"Cocos (Keeling) Islands\",\r\n  COL: \"Colombia\",\r\n  COM: \"Comoros\",\r\n  COG: \"Congo\",\r\n  COD: \"Congo (Democratic Republic of the)\",\r\n  COK: \"Cook Islands\",\r\n  CRI: \"Costa Rica\",\r\n  HRV: \"Croatia\",\r\n  CUB: \"Cuba\",\r\n  CUW: \"Curaçao\",\r\n  CYP: \"Cyprus\",\r\n  CZE: \"Czech Republic\",\r\n  DNK: \"Denmark\",\r\n  DJI: \"Djibouti\",\r\n  DMA: \"Dominica\",\r\n  DOM: \"Dominican Republic\",\r\n  ECU: \"Ecuador\",\r\n  EGY: \"Egypt\",\r\n  SLV: \"El Salvador\",\r\n  GNQ: \"Equatorial Guinea\",\r\n  ERI: \"Eritrea\",\r\n  EST: \"Estonia\",\r\n  ETH: \"Ethiopia\",\r\n  FLK: \"Falkland Islands (Malvinas)\",\r\n  FRO: \"Faroe Islands\",\r\n  FJI: \"Fiji\",\r\n  FIN: \"Finland\",\r\n  FRA: \"France\",\r\n  GUF: \"French Guiana\",\r\n  PYF: \"French Polynesia\",\r\n  ATF: \"French Southern Territories\",\r\n  GAB: \"Gabon\",\r\n  GMB: \"Gambia\",\r\n  GEO: \"Georgia\",\r\n  DEU: \"Germany\",\r\n  GHA: \"Ghana\",\r\n  GIB: \"Gibraltar\",\r\n  GRC: \"Greece\",\r\n  GRL: \"Greenland\",\r\n  GRD: \"Grenada\",\r\n  GLP: \"Guadeloupe\",\r\n  GUM: \"Guam\",\r\n  GTM: \"Guatemala\",\r\n  GGY: \"Guernsey\",\r\n  GIN: \"Guinea\",\r\n  GNB: \"Guinea-Bissau\",\r\n  GUY: \"Guyana\",\r\n  HTI: \"Haiti\",\r\n  HMD: \"Heard Island and McDonald Islands\",\r\n  VAT: \"Vatican City\",\r\n  HND: \"Honduras\",\r\n  HUN: \"Hungary\",\r\n  HKG: \"Hong Kong\",\r\n  ISL: \"Iceland\",\r\n  IND: \"India\",\r\n  IDN: \"Indonesia\",\r\n  CIV: \"Ivory Coast\",\r\n  IRN: \"Iran (Islamic Republic of)\",\r\n  IRQ: \"Iraq\",\r\n  IRL: \"Ireland\",\r\n  IMN: \"Isle of Man\",\r\n  ISR: \"Israel\",\r\n  ITA: \"Italy\",\r\n  JAM: \"Jamaica\",\r\n  JPN: \"Japan\",\r\n  JEY: \"Jersey\",\r\n  JOR: \"Jordan\",\r\n  KAZ: \"Kazakhstan\",\r\n  KEN: \"Kenya\",\r\n  KIR: \"Kiribati\",\r\n  KWT: \"Kuwait\",\r\n  KGZ: \"Kyrgyzstan\",\r\n  LAO: \"Lao People's Democratic Republic\",\r\n  LVA: \"Latvia\",\r\n  LBN: \"Lebanon\",\r\n  LSO: \"Lesotho\",\r\n  LBR: \"Liberia\",\r\n  LBY: \"Libya\",\r\n  LIE: \"Liechtenstein\",\r\n  LTU: \"Lithuania\",\r\n  LUX: \"Luxembourg\",\r\n  MAC: \"Macao\",\r\n  MKD: \"North Macedonia\",\r\n  MDG: \"Madagascar\",\r\n  MWI: \"Malawi\",\r\n  MYS: \"Malaysia\",\r\n  MDV: \"Maldives\",\r\n  MLI: \"Mali\",\r\n  MLT: \"Malta\",\r\n  MHL: \"Marshall Islands\",\r\n  MTQ: \"Martinique\",\r\n  MRT: \"Mauritania\",\r\n  MUS: \"Mauritius\",\r\n  MYT: \"Mayotte\",\r\n  MEX: \"Mexico\",\r\n  FSM: \"Micronesia (Federated States of)\",\r\n  MDA: \"Moldova (Republic of)\",\r\n  MCO: \"Monaco\",\r\n  MNG: \"Mongolia\",\r\n  MNE: \"Montenegro\",\r\n  MSR: \"Montserrat\",\r\n  MAR: \"Morocco\",\r\n  MOZ: \"Mozambique\",\r\n  MMR: \"Myanmar\",\r\n  NAM: \"Namibia\",\r\n  NRU: \"Nauru\",\r\n  NPL: \"Nepal\",\r\n  NLD: \"Netherlands\",\r\n  NCL: \"New Caledonia\",\r\n  NZL: \"New Zealand\",\r\n  NIC: \"Nicaragua\",\r\n  NER: \"Niger\",\r\n  NGA: \"Nigeria\",\r\n  NIU: \"Niue\",\r\n  NFK: \"Norfolk Island\",\r\n  PRK: \"Korea (Democratic People's Republic of)\",\r\n  MNP: \"Northern Mariana Islands\",\r\n  NOR: \"Norway\",\r\n  OMN: \"Oman\",\r\n  PAK: \"Pakistan\",\r\n  PLW: \"Palau\",\r\n  PSE: \"Palestine, State of\",\r\n  PAN: \"Panama\",\r\n  PNG: \"Papua New Guinea\",\r\n  PRY: \"Paraguay\",\r\n  PER: \"Peru\",\r\n  PHL: \"Philippines\",\r\n  PCN: \"Pitcairn\",\r\n  POL: \"Poland\",\r\n  PRT: \"Portugal\",\r\n  PRI: \"Puerto Rico\",\r\n  QAT: \"Qatar\",\r\n  UNK: \"Republic of Kosovo\",\r\n  REU: \"Réunion\",\r\n  ROU: \"Romania\",\r\n  RUS: \"Russian Federation\",\r\n  RWA: \"Rwanda\",\r\n  BLM: \"Saint Barthélemy\",\r\n  SHN: \"Saint Helena, Ascension and Tristan da Cunha\",\r\n  KNA: \"Saint Kitts and Nevis\",\r\n  LCA: \"Saint Lucia\",\r\n  MAF: \"Saint Martin (French part)\",\r\n  SPM: \"Saint Pierre and Miquelon\",\r\n  VCT: \"Saint Vincent and the Grenadines\",\r\n  WSM: \"Samoa\",\r\n  SMR: \"San Marino\",\r\n  STP: \"Sao Tome and Principe\",\r\n  SAU: \"Saudi Arabia\",\r\n  SEN: \"Senegal\",\r\n  SRB: \"Serbia\",\r\n  SYC: \"Seychelles\",\r\n  SLE: \"Sierra Leone\",\r\n  SGP: \"Singapore\",\r\n  SXM: \"Sint Maarten (Dutch part)\",\r\n  SVK: \"Slovakia\",\r\n  SVN: \"Slovenia\",\r\n  SLB: \"Solomon Islands\",\r\n  SOM: \"Somalia\",\r\n  ZAF: \"South Africa\",\r\n  SGS: \"South Georgia and the South Sandwich Islands\",\r\n  KOR: \"Korea (Republic of)\",\r\n  ESP: \"Spain\",\r\n  LKA: \"Sri Lanka\",\r\n  SDN: \"Sudan\",\r\n  SSD: \"South Sudan\",\r\n  SUR: \"Suriname\",\r\n  SJM: \"Svalbard and Jan Mayen\",\r\n  SWZ: \"Swaziland\",\r\n  SWE: \"Sweden\",\r\n  CHE: \"Switzerland\",\r\n  SYR: \"Syrian Arab Republic\",\r\n  TWN: \"Taiwan\",\r\n  TJK: \"Tajikistan\",\r\n  TZA: \"Tanzania, United Republic of\",\r\n  THA: \"Thailand\",\r\n  TLS: \"Timor-Leste\",\r\n  TGO: \"Togo\",\r\n  TKL: \"Tokelau\",\r\n  TON: \"Tonga\",\r\n  TTO: \"Trinidad and Tobago\",\r\n  TUN: \"Tunisia\",\r\n  TUR: \"Turkey\",\r\n  TKM: \"Turkmenistan\",\r\n  TCA: \"Turks and Caicos Islands\",\r\n  TUV: \"Tuvalu\",\r\n  UGA: \"Uganda\",\r\n  UKR: \"Ukraine\",\r\n  ARE: \"United Arab Emirates\",\r\n  GBR: \"United Kingdom of Great Britain and Northern Ireland\",\r\n  USA: \"United States of America\",\r\n  URY: \"Uruguay\",\r\n  UZB: \"Uzbekistan\",\r\n  VUT: \"Vanuatu\",\r\n  VEN: \"Venezuela (Bolivarian Republic of)\",\r\n  VNM: \"Vietnam\",\r\n  WLF: \"Wallis and Futuna\",\r\n  ESH: \"Western Sahara\",\r\n  YEM: \"Yemen\",\r\n  ZMB: \"Zambia\",\r\n  ZWE: \"Zimbabwe\",\r\n};\r\n\r\n// export const countryMap = () => {\r\n//   return new Map(Object.entries(countryCodes));\r\n// };\r\n","import React from \"react\";\r\nimport {\r\n  BorderCountryContainer,\r\n  BorderCountry,\r\n} from \"../css/BorderCountriesStyle\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectIsFulfilled } from \"../features/countries/countriesSlice\";\r\nimport { countryMap } from \"../data/countryMap\";\r\nimport { Country } from \"./CountryCardDetails\";\r\n\r\ninterface Props {\r\n  country: Country;\r\n  handleClick: (e: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\n// maps through a country's array of border countries and displays them\r\nfunction BorderCountries(props: Props) {\r\n  const isFulfilled = useSelector(selectIsFulfilled);\r\n\r\n  if (isFulfilled) {\r\n    return (\r\n      <BorderCountryContainer>\r\n        {props.country.borders &&\r\n          props.country.borders.map((x: any) => {\r\n            return (\r\n              <BorderCountry\r\n                key={\"border-\" + countryMap[x]}\r\n                onClick={props.handleClick}\r\n              >\r\n                {countryMap[x]}\r\n              </BorderCountry>\r\n            );\r\n          })}\r\n      </BorderCountryContainer>\r\n    );\r\n  } else {\r\n    return <h1>Loading Border Countries</h1>;\r\n  }\r\n}\r\n\r\nexport default BorderCountries;\r\n","import React, { useEffect, useState, useCallback, Suspense } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../features/app/hooks\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport {\r\n  getCountries,\r\n  selectCountries,\r\n  selectIsFulfilled,\r\n} from \"../features/countries/countriesSlice\";\r\nimport {\r\n  Container,\r\n  Image,\r\n  InfoContainer,\r\n  Header,\r\n  InfoPane,\r\n  Footer,\r\n  BackButton,\r\n  BorderSpan,\r\n} from \"../css/CountryCardDetailsStyles\";\r\n\r\nimport CardInfoEntry from \"./CardInfoEntry\";\r\nimport { NoMatch } from \"./NoMatch\";\r\nimport { CircleLoader } from \"react-spinners\";\r\nimport IonIcon from \"@reacticons/ionicons\";\r\nimport BorderCountries from \"./BorderCountries\";\r\n// const BorderCountries = React.lazy(() => import(\"./BorderCountries\"));\r\n\r\nfunction numberWithCommas(x: number) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \", \");\r\n}\r\n\r\nexport interface Country {\r\n  name: string;\r\n  nativeName: string;\r\n  numericCode: number;\r\n  languages: string[];\r\n  currencies: { name: string };\r\n  population: number;\r\n  topLevelDomain: string[];\r\n  flags: { png: string };\r\n  region: string;\r\n  subregion: string;\r\n  capital: string;\r\n  borders?: string[];\r\n}\r\n\r\nconst CountryCardDetails = React.memo(() => {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const countries = useSelector(selectCountries);\r\n  const [country, setCountry] = useState<Country | undefined | null>(null);\r\n  const dispatch = useAppDispatch();\r\n  const isFinishedLoading = useSelector(selectIsFulfilled);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  function getCountryByName(id: string | undefined): Country | undefined {\r\n    // changes dashes to spaces\r\n    let nameWithSpaces: string;\r\n\r\n    if (id) {\r\n      nameWithSpaces = id.replaceAll(/-/g, \" \");\r\n    }\r\n\r\n    const result = countries.find(\r\n      (country: Country) =>\r\n        country.name.toLowerCase() === nameWithSpaces.toLowerCase()\r\n    );\r\n\r\n    setIsLoading(false);\r\n    return result;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!countries) {\r\n      dispatch(getCountries());\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      if (!country) {\r\n        setError(true);\r\n      }\r\n    }, 1500);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setCountry(getCountryByName(id));\r\n  }, [id, isFinishedLoading, countries]);\r\n\r\n  function onDismiss() {\r\n    navigate(-1);\r\n  }\r\n\r\n  // passed to BorderCountries to view border country when clicked\r\n  const handleClick = useCallback((e: React.MouseEvent<HTMLElement>) => {\r\n    const text: string | null = (e.currentTarget as Element).textContent;\r\n    console.log(\"handleClick text content -> \" + text);\r\n    navigate(`/${text?.replaceAll(/ /g, \"-\")}`);\r\n  }, []);\r\n\r\n  const imgStyles = {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    display: \"block\",\r\n    src: \"url(${country.flags.png}) no-repeat\",\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <BackButton onClick={onDismiss}>\r\n        <IonIcon name=\"arrow-back-outline\"></IonIcon>\r\n        <p>Back</p>\r\n      </BackButton>\r\n\r\n      <CircleLoader loading={isLoading} size={200} />\r\n\r\n      {!country && error && <NoMatch />}\r\n\r\n      {country && (\r\n        <>\r\n          <Image>\r\n            <img\r\n              style={imgStyles}\r\n              src={country.flags.png}\r\n              alt={country.name}\r\n              loading=\"lazy\"\r\n            />\r\n          </Image>\r\n\r\n          <InfoContainer>\r\n            <Header>{country.name}</Header>\r\n\r\n            <InfoPane>\r\n              <CardInfoEntry\r\n                text={\"Native Name: \"}\r\n                value={country.nativeName}\r\n              />\r\n              <CardInfoEntry\r\n                text={\"Population: \"}\r\n                value={numberWithCommas(country.population)}\r\n              />\r\n              <CardInfoEntry text={\"Region: \"} value={country.region} />\r\n              <CardInfoEntry text={\"Sub Region: \"} value={country.subregion} />\r\n              <CardInfoEntry text={\"Capital: \"} value={country.capital} />\r\n            </InfoPane>\r\n            <InfoPane>\r\n              <CardInfoEntry\r\n                text={\"Top Level Domain: \"}\r\n                value={country.topLevelDomain[0]}\r\n              />\r\n              <CardInfoEntry\r\n                text={\"Currencies: \"}\r\n                value={\r\n                  country.currencies\r\n                    ? Object.values(country.currencies)\r\n                        .map((x: any) => x.name)\r\n                        .join(\",\")\r\n                    : \"\"\r\n                }\r\n              />\r\n              <CardInfoEntry\r\n                text={\"Languages: \"}\r\n                value={country.languages\r\n                  .map((language: any) => language.name)\r\n                  .join(\", \")}\r\n              />\r\n            </InfoPane>\r\n            <Footer>\r\n              <BorderSpan>Border Countries: </BorderSpan>\r\n\r\n              <BorderCountries country={country} handleClick={handleClick} />\r\n            </Footer>\r\n          </InfoContainer>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default CountryCardDetails;\r\n"],"names":["Container","styled","theme","body","BackButton","background","shadow","text","Image","InfoContainer","Header","InfoPane","BorderSpan","Footer","NoMatch","to","BorderCountry","BorderCountryContainer","countryMap","AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BES","BIH","BWA","BVT","BRA","IOT","UMI","VGB","VIR","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","CXR","CCK","COL","COM","COG","COD","COK","CRI","HRV","CUB","CUW","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HUN","HKG","ISL","IND","IDN","CIV","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MAC","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","NCL","NZL","NIC","NER","NGA","NIU","NFK","PRK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","UNK","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SLB","SOM","ZAF","SGS","KOR","ESP","LKA","SDN","SSD","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","URY","UZB","VUT","VEN","VNM","WLF","ESH","YEM","ZMB","ZWE","props","useSelector","selectIsFulfilled","country","borders","map","x","onClick","handleClick","React","navigate","useNavigate","id","useParams","countries","selectCountries","useState","setCountry","dispatch","useAppDispatch","isFinishedLoading","isLoading","setIsLoading","error","setError","useEffect","getCountries","timer","setTimeout","clearTimeout","nameWithSpaces","replaceAll","result","find","name","toLowerCase","getCountryByName","useCallback","e","currentTarget","textContent","console","log","CircleLoader","loading","size","style","height","width","display","src","flags","png","alt","CardInfoEntry","value","nativeName","population","toString","replace","region","subregion","capital","topLevelDomain","currencies","Object","values","join","languages","language"],"sourceRoot":""}